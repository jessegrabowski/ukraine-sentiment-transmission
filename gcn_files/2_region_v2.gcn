
assumptions
{
	positive
	{
		Theta, alpha, alpha_C, alpha_K, alpha_L,  beta, delta, eta_p, gamma_I, gamma_R, gamma_Y, gamma_pi,
		phi_H, pi_star, psi_C, psi_p, psi_L, psi_K, rho_preference, 
		rho_technology, rho_interest, sigma_C, sigma_L;
	};	
};

block STEADY_STATE
{
	definitions
	{
		gamma = (alpha_C ^ (1 / psi_C) + (1 - alpha_C) ^ (1 / psi_C)) ^ (-psi_C / (psi_C - 1));
	};

	identities
	{
		shock_preference[ss] = 1;
		shock_technology[ss] = 1;
		shock_interest[ss] = 1;
		pi[ss] = pi_star;
		P_A[ss] = (alpha_C + (1 - alpha_C) * ((1 - alpha_C) / alpha_C) ^ ((1 - psi_C) / psi_C)) ^ (-1 / (1 - psi_C)) ;
		P_B[ss] = (alpha / (1 - alpha)) ^ (-1 / psi_C) * P_A[ss];
		
		P_A_star[ss] = ((1 - eta_p * pi[ss] ^ (1 / psi_p)) / (1 - eta_p)) ^ psi_p * P_A[ss];
		P_B_star[ss] = ((1 - eta_p * pi[ss] ^ (1 / psi_p)) / (1 - eta_p)) ^ psi_p * P_B[ss];
		
		P_nu_A[ss] = (1 - eta_p) * P_A_star[ss] ^ (-1/psi_p) /
					 (1 - eta_p * pi[ss] ^ (1/psi_p));
		P_nu_B[ss] = (1 - eta_p) * P_B_star[ss] ^ (-1/psi_p) /
					 (1 - eta_p * pi[ss] ^ (1/psi_p));					 

		r_G[ss] = pi[ss] / beta;
		r[ss] = 1 / beta - (1 - delta);
		r_A[ss] = (alpha_K + (1 - alpha_K) * (alpha_K / (1 - alpha_K)) ^ ((1 - psi_K) / psi_K)) ^ (-1 / (1 - psi_K))
					 * r[ss];
		r_B[ss] = (alpha_K / (1 - alpha_K)) ^ ((1 - psi_K) / psi_K) * r_A[ss] ^ (1 - psi_K);
				
		mc_A[ss] = (1 - beta * eta_p * pi[ss] ^ ((1 + psi_p) / psi_p)) / 
				   (1 + psi_p) / (1 - beta * eta_p * pi[ss] ^ (1 / psi_p)) * P_A_star[ss];
		mc_B[ss] = (1 - beta * eta_p * pi[ss] ^ ((1 + psi_p) / psi_p)) / 
				   (1 + psi_p) / (1 - beta * eta_p * pi[ss] ^ (1 / psi_p)) * P_B_star[ss];
				   
#		w_A[ss] = (1 - alpha) * mc_A[ss] ^ (1 / (1 - alpha)) * 
#					(alpha / r_A[ss]) ^ (alpha / (1 - alpha));
#		w_B[ss] = (1 - alpha) * mc_B[ss] ^ (1 / (1 - alpha)) *
#					(alpha / r_B[ss]) ^ (alpha / (1 - alpha));

		w[ss] = (alpha_L * 
					((1 - alpha) * mc_A[ss] ^ (1 / (1 - alpha)) * (alpha / r_A[ss]) ^ (alpha / (1 - alpha))) ^ (1 - psi_L) +
				(1 - alpha_L) * 
					((1 - alpha) * mc_B[ss] ^ (1 / (1 - alpha)) * (alpha / r_B[ss]) ^ (alpha / (1 - alpha))) ^ (1 - psi_L)
				) ^ (1 / (1 - psi_L));

		w_A[ss] = (alpha_L + (1 - alpha_L) * (alpha_L / (1 - alpha_L)) ^ ((1 - psi_L) / psi_L)) ^ (-1 / (1 - psi_L))
					 * w[ss]; 
		w_B[ss] = (alpha_L / (1 - alpha_L)) ^ ((1 - psi_L) / psi_L) * w_A[ss] ^ (1 - psi_L);

		Y[ss] = (r[ss] / (r[ss] - 2 * delta * alpha * gamma * mc_A[ss] * P_nu_A[ss])) ^ 
					(sigma_C / (sigma_L + sigma_C)) * 
		    Theta ^ (-1 / (sigma_L + sigma_C)) *
			w[ss] ^ ((1 + sigma_L) / (sigma_L + sigma_C)) *
			(2 * (1 - alpha) * mc_A[ss] * P_nu_A[ss] * gamma) ^ (-sigma_L / (sigma_L + sigma_C));
		
		Y_A[ss] = gamma * Y[ss];
		Y_B[ss] = gamma * Y[ss];
		
		Y_f_A[ss] = Y_A[ss] * P_nu_A[ss];
		Y_f_B[ss] = Y_B[ss] * P_nu_B[ss];
		
		K_A[ss] = alpha * mc_A[ss] * Y_f_A[ss] / r_A[ss];
		L_A[ss] = (1 - alpha) * mc_A[ss] * Y_f_A[ss] / w_A[ss];
		K_B[ss] = alpha * mc_B[ss] * Y_f_B[ss] / r_B[ss];
		L_B[ss] = (1 - alpha) * mc_B[ss] * Y_f_B[ss] / w_B[ss];
		K[ss] = (alpha_K ^ (1 / psi_K) * K_A[ss] ^ ((psi_K - 1) / psi_K) +
		   (1 - alpha_K) ^ (1 / psi_K) * K_B[ss] ^ ((psi_K - 1) / psi_K))
					 ^ (psi_K / (psi_K - 1));
		L[ss] = (alpha_L ^ (1 / psi_L) * L_A[ss] ^ ((psi_L - 1) / psi_L) +
		   (1 - alpha_L) ^ (1 / psi_K) * L_B[ss] ^ ((psi_L - 1) / psi_L))
					 ^ (psi_L / (psi_L - 1));
		I[ss] = delta * K[ss];
		C[ss] = Y[ss] - I[ss];
		
		lambda[ss] = C[ss] ^ (-sigma_C);
		q[ss] = lambda[ss];
		
		RHS_A[ss] = lambda[ss]* mc_A[ss] * Y_A[ss] / 
						(1 - beta * eta_p * pi[ss] ^ ((1 + psi_p) / psi_p));
		RHS_B[ss] = lambda[ss]* mc_B[ss] * Y_B[ss] / 	
						(1 - beta * eta_p * pi[ss] ^ ((1 + psi_p) / psi_p));
		LHS_A[ss] = (1 + psi_p) * RHS_A[ss];
		LHS_B[ss] = (1 + psi_p) * RHS_B[ss];
		
		TC_A[ss] = -(r_A[ss] * K_A[ss] + w_B[ss] * L_A[ss]);
		TC_B[ss] = -(r_B[ss] * K_B[ss] + w_B[ss] * L_B[ss]);
		TC_Y[ss] = -(P_A[ss] * Y_A[ss] + P_B[ss] * Y_B[ss]);
		TC_K[ss] = -(r_A[ss] * K_A[ss] + r_B[ss] * K_B[ss]);	
		TC_L[ss] = -(w_A[ss] * L_A[ss] + w_B[ss] * L_B[ss]);

		Div_A[ss] = P_A[ss] * Y_A[ss] + TC_A[ss];
		Div_B[ss] = P_B[ss] * Y_B[ss] + TC_B[ss];
		Div_Y[ss] = Y[ss] + TC_Y[ss];
		Div_L[ss] = w[ss] * L[ss] + TC_L[ss];
		Div_K[ss] = r[ss] * K[ss] + TC_K[ss];		

		
		Div[ss] = Div_A[ss] + Div_B[ss] + Div_Y[ss];
		U[ss] = 1 / (1 - beta) * (C[ss] ^ (1 - sigma_C) / (1 - sigma_C) - 
			Theta * L[ss] ^ (1 + sigma_L) / (1 + sigma_L));

	};
};


block HOUSEHOLD
{
    definitions
    {
        u[] = shock_preference[] * (
				C[] ^ (1 - sigma_C) / (1 - sigma_C) -
			    Theta * L[] ^ (1 + sigma_L) / (1 + sigma_L));

		S[] = 1 - gamma_I / 2 * (I[] / I[-1] - 1) ^2;
    };
    controls
    {
		C[], I[], K[], B[], L[];
    };

    objective
    {
        U[] = u[] + beta * E[][U[1]];
    };

    constraints
    {
        C[] + I[] + B[] / r_G[]  =
			  r[] * K[-1] +
			  w[] * L[] +
			  B[-1] / pi[] +
			  Div[] : lambda[];

		K[] = (1 - delta) * K_A[-1] + I[] * S[] : q[]; 
    };

    calibration
    {
        delta = 0.025;
        beta = 0.99;
		Theta = 1;

        sigma_C = 2;
        sigma_L = 1.5;

		gamma_I = 10;
		phi_H = 0.5;
    };
};

block PREFERENCE_SHOCKS
{
	identities
	{
		log(shock_preference[]) = rho_preference * log(shock_preference[-1]) + epsilon_preference[];
	};

	shocks
	{
		epsilon_preference[];
	};

	calibration
	{
		rho_preference = 0.95;
	};
};


block HOME_CONSUMPTION_PRODUCTION
{
	controls
	{
		Y_A[], Y_B[];
	};
	
	objective
	{
		TC_Y[] = -(P_A[] * Y_A[] + P_B[] * Y_B[] );
	};
	
	constraints
	{		
		Y[] = (alpha_C  ^ (1 / psi_C) * Y_A[] ^ ((psi_C - 1) / psi_C) +
		  (1 - alpha_C) ^ (1 / psi_C) * Y_B[] ^ ((psi_C - 1) / psi_C)) ^
					(psi_C / (psi_C - 1)) : mc_Y[];
	};
	
	identities
	{
		Div_Y[] = Y[] + TC_Y[];
		mc_Y[] = 1;
	};
	
	calibration
	{
		alpha_C = 0.5; 
		psi_C = 0.7;
	};	
};

block CAPITAL_BUNDLER
{
	controls
	{
		K_A[-1], K_B[-1];
	};

	objective
	{
		TC_K[] = -(r_A[] * K_A[-1] + r_B[] * K_B[-1]);
	};

	constraints
	{
		K[] = (alpha_K ^ (1 / psi_K) * K_A[-1] ^ ((psi_K - 1) / psi_K) + 
				(1 - alpha_K) ^ (1 / psi_K) * K_B[-1] ^ ((psi_K - 1) / psi_K)) ^
					(psi_K / (psi_K - 1)) : r[];
	};

	identities
	{
		Div_K[] = r[] * K[] - TC_K[]
	};

	calibration
	{
		alpha_K = 0.5;
		psi_K = 0.22;
	};
};

block LABOR_BUNDLER
{
	controls
	{
		L_A[], L_B[];
	};

	objective
	{
		TC_L[] = -(w_A[] * L_A[] + w_B[] * L_B[]);
	};

	constraints
	{
         L[] = (alpha_L ^ (1 / psi_L) * L_A[] ^ ((psi_L - 1) / psi_L) +
					(1 - alpha_L) ^ (1 / psi_L) * L_B[-1] ^ ((psi_L - 1) / psi_L)) ^
					(psi_L / (psi_L - 1)) : w[];
	};

	identities
	{	
		Div_L[] = w[] * L[] - TC_L[]; 
	};

	calibration
	{
		alpha_L = 0.5;
		psi_L = 0.22;
	};
};

block FIRM_A
{
    controls
    {
        K_A[-1], L_A[];
    };

    objective
    {
        TC_A[] = -(L_A[] * w_A[] + K_A[-1] * r_A[]);
    };

    constraints
    {
        Y_f_A[] = shock_technology[] * K_A[-1] ^ alpha *
					L_A[] ^ (1 - alpha) :  mc_A[];
    };

	identities
	{
		Div_A[] = Y_A[] + TC_A[];
	};

    calibration
    {
        alpha  = 0.35;
    };
};


block FIRM_A_PRICE_SETTING_PROBLEM
{
	identities
	{
		LHS_A[] = (1 + psi_p) * RHS_A[];

		LHS_A[] = lambda[] * Y_A[] * P_A_star[] +
			beta * eta_p * E[][
				(pi[1] * P_A_star[1] / P_A_star[]) ^ (1 / psi_p) * LHS_A[1]];

		RHS_A[] = lambda[] * mc_A[] * Y_A[] +
			beta * eta_p * E[][
				(pi[1] * P_A_star[1] / P_A_star[]) ^ ((1 + psi_p) / psi_p) * RHS_A[1]];
	};

	calibration
	{
		psi_p   = 0.6;
		eta_p   = 0.75;
	};
};


block FIRM_A_PRICE_EVOLUTION
{
	identities
	{
		1 = eta_p * (pi[] * P_A[] / P_A[-1]) ^ (1 / psi_p) +
				(1 - eta_p) * (P_A[] / P_A_star[]) ^ (-1 / psi_p);
	};
};


block FIRM_A_PRICE_EFFICENCY_DISTORTION
{
	identities
	{
		P_nu_A[] * Y_A[] = Y_f_A[];
		P_nu_A[] = (1 - eta_p) * P_A_star[] ^ (-1/psi_p) + 
						eta_p * (pi[] * P_A[] / P_A[-1]) ^ (1/psi_p) * P_nu_A[-1];
	};
};


block FIRM_B
{
    controls
    {
        K_B[-1], L_B[];
    };

    objective
    {
        TC_B[] = -(L_B[] * w_B[] + K_B[-1] * r_B[]);
    };

    constraints
    {
        Y_f_B[] = shock_technology[] * K_B[-1] ^ alpha *
					L_B[] ^ (1 - alpha) :  mc_B[];
    };

	identities
	{
		Div_B[] = Y_B[] + TC_B[];
	};
};

block FIRM_B_PRICE_SETTING_PROBLEM
{
	identities
	{
		LHS_B[] = (1 + psi_p) * RHS_B[];

		LHS_B[] = lambda[] * Y_B[] * P_B_star[] +
			beta * eta_p * E[][
				(pi[1] * P_B_star[1] / P_B_star[]) ^ (1 / psi_p) * LHS_B[1]];

		RHS_B[] = lambda[] * mc_B[] * Y_B[] +
			beta * eta_p * E[][
				(pi[1] * P_B_star[1] / P_B_star[]) ^ ((1 + psi_p) / psi_p) * RHS_B[1]];
	};

	calibration
	{
		psi_p   = 0.6;
		eta_p   = 0.75;
	};
};


block FIRM_B_PRICE_EVOLUTION
{
	identities
	{
		1 = eta_p * (pi[] * P_B[] / P_B[-1]) ^ (1 / psi_p) +
				(1 - eta_p) * (P_B[] / P_B_star[]) ^ (-1 / psi_p);
	};
};


block FIRM_B_PRICE_EFFICENCY_DISTORTION
{
	identities
	{
		P_nu_B[] * Y_B[] = Y_f_B[];
		P_nu_B[] = (1 - eta_p) * P_B_star[] ^ (-1/psi_p) + 
						eta_p * (pi[] * P_B[] / P_B[-1]) ^ (1/psi_p) * P_nu_B[-1];
	};
};



block TECHNOLOGY_SHOCKS
{
    identities
    {
        log(shock_technology[]) = rho_technology * log(shock_technology[-1]) + epsilon_Y[];
    };
    shocks
    {
        epsilon_Y[];
    };
    calibration
    {
        rho_technology = 0.95;
    };
};


block MONETARY_POLICY
{
	identities
	{
		r_G[] / r_G[ss] = (pi[] / pi_star) ^ phi_pi * (Y[] / Y[ss]) * shock_interest[];
		log(shock_interest[]) = rho_interest * log(shock_interest[-1]) + epsilon_interest[];
	};
	
	shocks
	{
		epsilon_interest[];
	};
	
	calibration
	{
		pi_star = 1.005;
		phi_pi  = 10;
		phi_Y	= 0.5;
		rho_interest = 0.5;
	};
};


block EQUILIBRIUM
{
    identities
    {
		Div[] = Div_A[] + Div_B[] + Div_Y[];
		B[] = 0;
    };
};
